services:

  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT_EXTERNAL}:${DATABASE_PORT_ITERNAL}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME} -h localhost" ]
      interval: 5s
      timeout: 2s
      retries: 3

  parser:
    build: .
    command: python -u parser/run_parser.py
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy

  bot:
    build: .
    command: python -u telegram_bot/bot.py
    volumes:
      - .:/app
    ports:
      - "${WEBAPP_PORT}:${WEBAPP_PORT}"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: "redis:7"
    container_name: "redis_service"
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 2s
      retries: 3

  celery:
    build:
      context: .
    container_name: celery
    depends_on:
      - redis
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app  # Add /app to the Python path
    command: celery -A telegram_bot.celery_worker worker -P solo --loglevel=info


  flower:
    build:
      context: .
    container_name: flower
    depends_on:
      - redis
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app  # Add /app to the Python path
      - FLOWER_UNAUTHENTICATED_API=true
    command: celery -A telegram_bot.celery_worker flower --port=5555 --broker=redis://redis:6379/0
    ports:
      - "5555:5555"

volumes:
  postgres_data:
  redis_data: