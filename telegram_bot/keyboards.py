import telebot
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from telegram_bot.headers import TEST_PAYMETNS
from telegram_bot.subscriptions import subscriptions

# –î–∞–Ω–Ω—ã–µ –æ –±–∏—Ä–∂–∞—Ö
PLATFORMS = {
    "fl": "fl.ru",
    # "freelance": "freelance.ru",
    # "weblancer": "weblancer.net",
    # "freelancehunt": "freelancehunt.com",
    "upwork": "upwork.com",
    # "workspace": "workspace.ru",
    "habr": "freelance.habr.com",
    # "freelancer": "www.freelancer.com",
    # "youdo": "youdo.com",
    "kwork": "kwork.ru"
}


# –ë–ª–æ–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ

def get_welcome_1_message():
    return """
–ü—Ä–∏–≤–µ—Ç! üëã
–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –±–∏—Ä–∂–∞—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–∞. üöÄ

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
1Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂–∏: –£–∫–∞–∂–∏, —Å –∫–∞–∫–∏—Ö –±–∏—Ä–∂ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.
2Ô∏è‚É£ –¢–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: –î–æ–±–∞–≤—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –∑–∞–¥–∞—á–∏.
3Ô∏è‚É£ –°—Ç–æ–ø-—Ç–µ–≥–∏: –ò—Å–∫–ª—é—á–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é —Å—Ç–æ–ø-—Å–ª–æ–≤.
4Ô∏è‚É£ –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ü–µ–Ω–µ: –ù–∞—Å—Ç—Ä–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.
5Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: –¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂—É –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ ‚Äî —è –≥–∏–±–∫–∏–π!

üí° –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.

–ì–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å –∑–∞–∫–∞–∑—ã? –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! üëá"""


def get_welcome_1_keyboard():
    button = types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="welcome")
    return InlineKeyboardMarkup(inline_keyboard=[[button]])


def get_welcome_2_message(full_name, user_filters, user_active_subscriptions, user_inactive_subscriptions):
    if len(user_filters) > 0:
        if len(user_active_subscriptions) > 0:
            status = "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
        else:
            status = "‚õî –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ü–∏—à–∏ /buy"
    else:
        status = "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞"

    active_subs_text = []
    for sub in user_active_subscriptions:
        active_subs_text.append(f"""<blockquote>{sub.name}        
    –û—Ç: {sub.datetime_operation}
    –î–æ: {sub.datetime_expire}</blockquote>""")

    inactive_subs_text = []
    for sub in user_inactive_subscriptions:
        inactive_subs_text.append(f"""<blockquote>{sub.name}        
    –û—Ç: {sub.datetime_operation}
    –î–æ: {sub.datetime_expire}</blockquote>""")

    if len(active_subs_text) > 0 and len(inactive_subs_text) > 0:
        subs_text = f"""üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö UniFreelance –ø–æ–¥–ø–∏—Å–æ–∫: 
    
    {"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:" + ' '.join(active_subs_text) if len(active_subs_text) > 0 else ""}
    {"üî¥ –ò—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:" + ' '.join(inactive_subs_text) if len(inactive_subs_text) > 0 else ""}
    –ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:
    """
    else:
        subs_text = "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ ü•∫"

    return f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{full_name}</b>!

–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}

–ü–æ–¥–ø–∏—Å–∫–∞: {subs_text}"""


def get_welcome_2_keyboard(user_filters):
    if len(user_filters) > 0:
        button = types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="goto_setup")
        return InlineKeyboardMarkup(inline_keyboard=[[button]])
    else:
        button = types.InlineKeyboardButton(text="üÜï –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="goto_setup")
        return InlineKeyboardMarkup(inline_keyboard=[[button]])


def get_setup_menu_text(user_filters):
    platforms_text = '\n'.join([
        f'<b>{index}</b>. {PLATFORMS[filter_object.platform]}'.strip()
        for
        index, filter_object in enumerate(user_filters, start=1)])
    if len(user_filters) > 0:
        return f"""–í–∞—à–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –±–∏—Ä–∂–∏:
{platforms_text}"""
    else:
        return "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∏—Ä–∂"


def get_setup_menu_keyboard(user_filters):
    button1 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –±–∏—Ä–∂—É", callback_data="add_platform")

    platform_buttons = [[types.InlineKeyboardButton(text=f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å {PLATFORMS[filter_object.platform]}",
                                                    callback_data=f"goto_settings_{filter_object.platform}")] for
                        filter_object in user_filters]
    return InlineKeyboardMarkup(inline_keyboard=[*platform_buttons, [button1]])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
def get_settings_keyboard(platform):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data=f"add_keywords_{platform}")],
        [InlineKeyboardButton(text="üö´ –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞", callback_data=f"add_stopwords_{platform}")],
        [InlineKeyboardButton(text="üí∞ –£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", callback_data=f"set_price_{platform}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goto_setup")]
    ])


def back_to_platform_settings(platform, delete_all_keywords=False, delete_all_stop_keywords=False):
    buttons = []
    if delete_all_keywords:
        buttons.append(
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞", callback_data=f"delete_all_keywords_{platform}")], )
    if delete_all_stop_keywords:
        buttons.append(
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞", callback_data=f"delete_all_stop_keywords_{platform}")], )
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"goto_settings_{platform}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_market_keyboard(selected_markets: set) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
    for platform in PLATFORMS.keys():
        if platform in selected_markets:
            label = f"‚úÖ {PLATFORMS[platform]}"
            callback_data = f"toggle:{platform}"
        else:
            label = f"‚ùå {PLATFORMS[platform]}"
            callback_data = f"toggle:{platform}"
        builder.add(InlineKeyboardButton(text=label, callback_data=callback_data))

    builder.add(InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="navigate:done"))
    builder.adjust(1)
    return builder.as_markup()


def get_new_task_notification(order_dict):
    return f'''
<b>{order_dict['title']}</b>

{order_dict['description'] if len(order_dict['description']) < 400 else order_dict['description'][:400] + '...'}

<b>{order_dict['payment']}</b>

–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{PLATFORMS[order_dict['platform']]}</b>

<a href='{order_dict['direct_url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
'''


def def_new_task_notification(message_id, order_url, db_id):
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_translate = telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥",
                                                          callback_data=f'translate|{message_id}|{db_id}')
    button_go = telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", url=order_url)
    keyboard.row(button_translate)
    keyboard.row(button_go)
    return keyboard


# –∑—É9—Ñ–∫–Ω—Ç–æ—Ä—â—Ü485–ø37–Ω–ø–µ8–≥345–∑0–æ–ª9–≥–Ω—â3459—É–∑90—à–ø–º–≥–≥–∫
# –ë–ª–æ–∫ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫

def get_subs_message(sale: int = 0):
    return [f"""
–í—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—ã–π –ø–ª–∞–Ω –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Ä—Ñ–∏–Ω–≥–æ–º! üåê

‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ 

{f'üîñ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {sale}%' if sale else ''}
üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:
""", "üóìÔ∏è –ì–æ–¥–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (‚úÖ –≠–∫–æ–Ω–æ–º–∏—è 20%):"]


def get_subs_keyboard(sale: int = 0):
    testday_1 = types.InlineKeyboardButton(
        text=f"1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (—Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞) - {subscriptions['testday_1']['price'] * (100 - sale) / 100}‚ÇΩ",
        callback_data="testday_1")

    month_1 = types.InlineKeyboardButton(
        text=f"1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - {subscriptions['month_1']['price'] * (100 - sale) / 100}‚ÇΩ",
        callback_data="month_1")
    month_2 = types.InlineKeyboardButton(
        text=f"2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - {subscriptions['month_2']['price'] * (100 - sale) / 100}‚ÇΩ",
        callback_data="month_2")
    month_3 = types.InlineKeyboardButton(
        text=f"3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - {subscriptions['month_3']['price'] * (100 - sale) / 100}‚ÇΩ",
        callback_data="month_3")

    year_1 = types.InlineKeyboardButton(text=f"1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - {subscriptions['year_1']['price'] * (100 - sale) / 100}‚ÇΩ",
                                        callback_data="year_1")
    year_2 = types.InlineKeyboardButton(text=f"2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - {subscriptions['year_2']['price'] * (100 - sale) / 100}‚ÇΩ",
                                        callback_data="year_2")
    year_3 = types.InlineKeyboardButton(text=f"3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - {subscriptions['year_3']['price'] * (100 - sale) / 100}‚ÇΩ",
                                        callback_data="year_3")

    return [
        InlineKeyboardMarkup(inline_keyboard=[[month_1], [month_2], [month_3]]),
        InlineKeyboardMarkup(inline_keyboard=[[year_1], [year_2], [year_3]])
    ] if not TEST_PAYMETNS else [
        InlineKeyboardMarkup(inline_keyboard=[[testday_1]]),
        InlineKeyboardMarkup(inline_keyboard=[])
    ]


# –ë–ª–æ–∫ –æ–ø–ª–∞—Ç—ã

def get_pay_message(sale):
    return f"""
üõçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: ‚ú®
{f'–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {sale}%' if sale > 0 else ''}"""


def get_pay_keyboard(amount, url):
    button1 = types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount}‚ÇΩ", url=url)
    return InlineKeyboardMarkup(inline_keyboard=[[button1]])


# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞

def get_success_pay_message(config_url):
    return f"""
‚úÖ –°—É–ø–µ—Ä! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: üåê

<blockquote>{config_url}</blockquote>

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä Kovanoff VPN üçÄ"""


def get_success_pay_keyboard():
    button1 = types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º", callback_data="instruction")
    return InlineKeyboardMarkup(inline_keyboard=[[button1]])


# –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã

def get_canceled_pay_message():
    return f"""
‚ùå –£–ø—Å! –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:
"""


def get_canceled_pay_keyboard(again_text, again_callback):
    button1 = types.InlineKeyboardButton(text=again_text, callback_data=again_callback)
    return InlineKeyboardMarkup(inline_keyboard=[[button1]])


# –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫

def get_empty_subscriptions_message():
    return f"""
‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ ü•∫
"""


def get_actual_subscriptions_message(active_subs, inactive_subs):
    active_subs_text = []
    for sub in active_subs:
        active_subs_text.append(f"""<blockquote>{subscriptions[sub['subscription']]['name']}        
–û—Ç: {sub['datetime_operation']}
–î–æ: {sub['datetime_expire']}</blockquote>""")

    inactive_subs_text = []
    for sub in inactive_subs:
        inactive_subs_text.append(f"""<blockquote>{subscriptions[sub['subscription']]['name']}        
–û—Ç: {sub['datetime_operation']}
–î–æ: {sub['datetime_expire']}</blockquote>""")

    return f"""
üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö VPN –ø–æ–¥–ø–∏—Å–æ–∫: üåê

{"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:" + ' '.join(active_subs_text) if len(active_subs_text) > 0 else ""}
{"üî¥ –ò—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:" + ' '.join(inactive_subs_text) if len(inactive_subs_text) > 0 else ""}
–ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:
"""


def get_active_subscriptions_keyboard(active_subs):
    button_list = [
        [types.InlineKeyboardButton(text=f"{subscriptions[sub['subscription']]['name']} –î–æ: {sub['datetime_expire']}",
                                    callback_data=f"get_info_{sub['panel_uuid']}")] for sub in active_subs
    ]
    return InlineKeyboardMarkup(inline_keyboard=button_list)


# –ü–æ–¥–ø–∏—Å–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞/–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è

def get_cancel_subsciption():
    return """
‚õî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ü–æ—Å–ø–µ—à–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π üöÄ"""


def get_remind_message(days_before_expr):
    return f"""
‚ùó –í–Ω–∏–º–∞–Ω–∏–µ, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {days_before_expr} –¥–Ω—è. –ü–æ—Å–ø–µ—à–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π üöÄ"""


def get_continue_cancell_message():
    return f"""
‚õî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ü—Ä–æ–¥–ª–∏—Ç—å –µ—ë –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é üöÄ"""


def get_cancel_keyboard():
    button1 = types.InlineKeyboardButton(text="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="get_sub")
    return InlineKeyboardMarkup(inline_keyboard=[[button1]])


def get_continue_keyboard(panel_uuid):
    button1 = types.InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"continue_{panel_uuid}")
    return InlineKeyboardMarkup(inline_keyboard=[[button1]])


# –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

def get_success_continue_message(exp_date):
    return f"""
–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞! ‚úÖ
–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {exp_date}"""


# –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
def get_cancel_try_period_message():
    return """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ üòÅ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É"""


# –†–µ—Ñ–µ—Ä–∞–ª

def get_ref_link_message(link):
    return f"üîó –í–∞—à–∞ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞ {link}"


def get_sale_limit_message(sale):
    return f"""
–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. üí≤ 
–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {sale}% (–ú–∞–∫—Å–∏–º—É–º.) üîù"""


def get_sale_increase_message(sale):
    return f"""
–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. üí≤ 
–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {sale}% üìà"""


# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã
def get_service_working_message():
    return """
üöß –í–Ω–∏–º–∞–Ω–∏–µ! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã üõ†Ô∏è. –ù–∞—à –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚è≥. –ú—ã –ø—Ä–∏–ª–∞–≥–∞–µ–º –≤—Å–µ —É—Å–∏–ª–∏—è, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! üîß

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ üôè"""


def get_subs_limit_message(limit):
    return f"""
‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ {limit} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫! üñêÔ∏è

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–¥–Ω–æ–π –∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é üí≥"""


def get_wrong_command_message():
    return """
‚ö†Ô∏èÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!"""
